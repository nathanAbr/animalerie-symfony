<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Pet;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMapping;
use Doctrine\ORM\Query\ResultSetMappingBuilder;

/**
 * PetRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PetRepository extends EntityRepository
{
    public function findPetsByKindParent($id = null){

        $rsm = new ResultSetMappingBuilder($this->getEntityManager());
        $rsm->addEntityResult(Pet::class, 'pet');

        foreach ($this->getClassMetadata()->fieldMappings as $obj) {
            $rsm->addFieldResult("pet", $obj["columnName"], $obj["fieldName"]);
        }

        if($id === null){
            $query = $this->getEntityManager()->createNativeQuery('
            SELECT a.* FROM pet p
              JOIN pet a ON p.id = a.parent_id
              WHERE p.parent_id IS NULL', $rsm);
        } else {
            $query = $this->getEntityManager()->createNativeQuery('
            SELECT a.* FROM pet p
              JOIN pet a ON p.id = a.parent_id
              WHERE p.id = ?', $rsm);

            $query->setParameter(1, $id);
        }
        return $query->getResult();
    }

    public function findFirstKindOfPet(){

        $rsm = new ResultSetMapping();

        $query = $this->getEntityManager()->createNativeQuery('
            SELECT * FROM pet WHERE pet.parent_id IS NULL', $rsm);

        return $query->getResult();

    }

    public function find($id){

        $rsm = new ResultSetMappingBuilder($this->getEntityManager());
        $rsm->addEntityResult(Pet::class, 'pet');

        foreach ($this->getClassMetadata()->fieldMappings as $obj) {
            $rsm->addFieldResult("pet", $obj["columnName"], $obj["fieldName"]);
        }

        $query = $this->getEntityManager()->createNativeQuery('
            SELECT * FROM pet p WHERE p.id = ?', $rsm);

        $query->setParameter(1, $id);
        $query->execute();
        return $query->getResult();
    }
}
